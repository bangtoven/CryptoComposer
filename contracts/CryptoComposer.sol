// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

import "./CryptoComposerToken.sol";

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

/// @title Contract to mint music NFT and distribute CCT
/// @author Jungho Bang
/// @notice Allows users to mint their song, accepting CCT as payment
contract CryptoComposer is ERC721, ERC721Enumerable, ERC721Burnable, Ownable {
    CryptoComposerToken ccToken;

    // token price for ETH
    uint256 public tokenPrice = 100000000000000;

    function buyToken() public payable returns (uint256 tokenAmount) {
      require(msg.value > 0, "Send ETH to buy some tokens");

      uint256 amountToBuy = msg.value / tokenPrice;

      // check if the Vendor Contract has enough amount of tokens for the transaction
      uint256 vendorBalance = ccToken.balanceOf(address(this));
      if (vendorBalance < amountToBuy) {
        ccToken.mint(address(this), 1000);
      }

      // Transfer token to the msg.sender
      (bool sent) = ccToken.transfer(msg.sender, amountToBuy);
      require(sent, "Failed to transfer token to user");

      return amountToBuy;
    }

    uint256 public tokenPerMinting = 1;

    modifier hasEnoughComposerToken() {
        uint256 allowance = ccToken.allowance(msg.sender, address(this));
        require(allowance >= tokenPerMinting, "Check the token allowance");
        _;
    }

    struct Song {
        address composer;
        string title;
        bytes notes;
    }

    mapping (uint256 => Song) public songs;

    function mintNewSong(string calldata title, bytes calldata notes) public hasEnoughComposerToken returns (uint256) {
        (bool sent) = ccToken.transferFrom(msg.sender, address(this), tokenPerMinting);
        require(sent, "Failed to pay token to contract");

        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(msg.sender, tokenId);
        songs[tokenId] = Song({
            composer: msg.sender,
            title: title,
            notes: notes
        });
        return tokenId;
    }

    // The following lines are generated by OpenZeppelin Wizard

    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;

    constructor(address cctAddress) ERC721("CryptoComposer", "CC") {
        ccToken = CryptoComposerToken(cctAddress);
    }

    function _baseURI() internal pure override returns (string memory) {
        return "http://crypto-composer.bangtoven.com/";
    }

    // The following functions are overrides required by Solidity.

    function _beforeTokenTransfer(address from, address to, uint256 tokenId)
        internal
        override(ERC721, ERC721Enumerable)
    {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}